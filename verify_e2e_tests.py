#!/usr/bin/env python3
"""
verify_e2e_tests.py

This module verifies the end-to-end test cases generated by generate_e2e.py.
It executes the generated test file (output/generated_tests_e2e.py) using a subprocess,
captures the results (stdout, stderr, and return code), and logs the details.

Usage:
    $ python verify_e2e_tests.py
"""

import os
import subprocess
import logging
from pathlib import Path
from dotenv import load_dotenv

# Load environment variables from .env if available.
load_dotenv()

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def run_e2e_tests(test_file: str) -> int:
    """
    Execute the generated E2E test file and log the results.

    Args:
        test_file (str): Path to the generated E2E test file.

    Returns:
        int: The return code from the test execution.
             A value of 0 indicates success.
    """
    logger.info("Verifying E2E tests in file: %s", test_file)
    test_path = Path(test_file)
    if not test_path.exists():
        logger.error("Test file not found: %s", test_file)
        return -1

    try:
        # Run the test file using the current Python interpreter.
        result = subprocess.run(
            ["python", str(test_path)],
            capture_output=True,
            text=True,
            check=False
        )
        logger.info("Test execution completed with return code: %d", result.returncode)
        if result.stdout:
            logger.info("Standard Output:\n%s", result.stdout)
        if result.stderr:
            logger.error("Standard Error:\n%s", result.stderr)
        return result.returncode
    except Exception as e:
        logger.exception("An error occurred while running the E2E tests: %s", e)
        return -1

def main():
    # Define the path to the generated E2E tests.
    test_file = "output/generated_tests_e2e.py"
    ret_code = run_e2e_tests(test_file)

    if ret_code == 0:
        print("E2E tests passed successfully.")
    else:
        print("E2E tests failed. Check logs for details.")

if __name__ == "__main__":
    main()


